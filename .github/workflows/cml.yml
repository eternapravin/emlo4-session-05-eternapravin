name: Train and Report

on:
  push:
    branches: [ dvc ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  COMPARE_BRANCH: dvc

jobs:
  train-and-report:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v2

    - name: Set up Python 3.12
      run: uv python install 3.12

    - name: Install dependencies
      env:
        UV_EXTRA_INDEX_URL: https://download.pytorch.org/whl/cpu
      run: |
        uv sync

    - name: Setup DVC
      uses: iterative/setup-dvc@v1

    - name: Setup CML
      uses: iterative/setup-cml@v1

    - name: Pull DVC data
      env:
        GDRIVE_CREDENTIALS_DATA: ${{ secrets.GDRIVE_CREDENTIALS_DATA }}
      run: dvc pull

    - name: Train model
      run: |
        uv run dvc repro

    - name: Install additional dependencies
      run: |
        uv pip install pandas altair

    - name: Create CML report
      env:
        REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "## Training Metrics" >> report.md
        
        # Find the latest metrics.csv file
        METRICS_FILE=$(find logs/train/runs -name "metrics.csv" | sort -r | head -n 1)
        
        # Create plots using Python and Altair
        python - <<EOF
        import pandas as pd
        import altair as alt
        import json

        # Read the CSV file
        df = pd.read_csv('$METRICS_FILE')

        # Create plots
        def create_plot(y_column, title):
            chart = alt.Chart(df).mark_line().encode(
                x='step:Q',
                y=alt.Y(f'{y_column}:Q', scale=alt.Scale(zero=False)),
                color='rev:N'
            ).properties(
                width=600,
                height=400,
                title=title
            )
            return chart

        plots = [
            ('train/acc', 'Training Accuracy'),
            ('val/acc', 'Validation Accuracy'),
            ('train/loss', 'Training Loss'),
            ('val/loss', 'Validation Loss')
        ]

        for column, title in plots:
            chart = create_plot(column, title)
            chart.save(f'{column.replace("/", "_")}_plot.png')

        EOF

        # Add plots to the report
        echo "### Accuracy" >> report.md
        echo '![](./train_acc_plot.png "Training Accuracy")' >> report.md
        echo '![](./val_acc_plot.png "Validation Accuracy")' >> report.md
        
        echo "### Loss" >> report.md
        echo '![](./train_loss_plot.png "Training Loss")' >> report.md
        echo '![](./val_loss_plot.png "Validation Loss")' >> report.md
        
        # Add test metrics if available
        if grep -q "test/acc" $METRICS_FILE; then
          echo "## Test Metrics" >> report.md
          TEST_ACC=$(tail -n 1 $METRICS_FILE | cut -d',' -f3)
          TEST_LOSS=$(tail -n 1 $METRICS_FILE | cut -d',' -f4)
          echo "- Test Accuracy: $TEST_ACC" >> report.md
          echo "- Test Loss: $TEST_LOSS" >> report.md
        fi
        
        # Create and post the report
        cml comment create report.md

    # - name: Upload TensorBoard logs
    #   env:
    #     TB_CREDENTIALS: ${{ secrets.TB_CREDENTIALS }}
    #   run: |
    #     # Find the latest TensorBoard log directory
    #     TB_LOGDIR=$(find logs/train/runs -name "tensorboard" | sort -r | head -n 1)
        
    #     # Connect to TensorBoard and add the link to the report
    #     cml tensorboard connect \
    #       --logdir=$TB_LOGDIR \
    #       --name="View TensorBoard" \
    #       --md >> tensorboard_report.md
        
    #     # Post the TensorBoard link
    #     cml comment create tensorboard_report.md
